AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ocr-service-prod

  Sample SAM Template for ocr-service prod deployment

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active

  Api:
    TracingEnabled: true
    BinaryMediaTypes:
      - '*/*'
    MethodSettings:
      - LoggingLevel: INFO
        MetricsEnabled: True
        DataTraceEnabled: True
        ResourcePath: "/*"
        HttpMethod: "*"

Parameters:
  Stage:
    Type: String
    Default: prd
    Description: "Deployment production"

  CustomDomain:
    Type: String
    Default: ocr-prd
    Description: "Custom domain for Cognito user pool"

Resources:

  OCRPrdUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: ocr-prd-user-pool
      AutoVerifiedAttributes:
        - email

  OCRPrdUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: prd-client
      UserPoolId: !Ref OCRPrdUserPool
      GenerateSecret: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - ocr.analyze # Custom scope for document analysis
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AccessTokenValidity: 60 # 60 minutes
      IdTokenValidity: 60 # 60 minutes
      RefreshTokenValidity: 30 # 30 days
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      CallbackURLs:
        - https://yestechforce.com/callback  # Replace with your actual callback URL

  OCRPrdUserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: !Ref CustomDomain
      UserPoolId: !Ref OCRPrdUserPool

  OCRResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId: !Ref OCRPrdUserPool
      Identifier: ocr-service
      Name: OCR Service Resource Server
      Scopes:
        - ScopeName: ocr.analyze
          ScopeDescription: Analyze documents

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaTextractAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'textract:DetectDocumentText'
                  - 'textract:AnalyzeDocument'
                  - 'textract:StartDocumentTextDetection'
                  - 'textract:GetDocumentTextDetection'
                  - 'textract:StartDocumentAnalysis'
                  - 'textract:GetDocumentAnalysis'
                  - 'textract:AnalyzeExpense'
                  - 'textract:AmazonTextractFullAccess'
                  - 'textract:AnalyzeID'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
        - 'arn:aws:iam::aws:policy/ComprehendFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'

  OCRFunctionPrd:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ocr/
      Policies:
        - CloudWatchLogsFullAccess
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 60
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          STAGE: !Ref Stage
      Architectures:
        - x86_64
      Events:
        OCRPrd:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref PrdApi
            Auth:
              Authorizer: PrdCognitoAuthorizer

  PrdApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PrdApi
      StageName: !Ref Stage
      Auth:
        Authorizers:
          PrdCognitoAuthorizer:
            UserPoolArn: !GetAtt OCRPrdUserPool.Arn
            Identity:
              Header: Authorization

  OCRLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OCRFunctionPrd}"
      RetentionInDays: 5

  ConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: OCRFunctionPrd
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OCRFunctionPrd
      Principal: apigateway.amazonaws.com

  ApiGwAccountConfig: 
    Type: "AWS::ApiGateway::Account"
    Properties: 
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"

  ApiGatewayLoggingRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs' 

Outputs:
  OCRPrdApi:
    Description: API Gateway endpoint URL for prod stage for OCR function
    Value: !Sub "https://${PrdApi}.execute-api.${AWS::Region}.amazonaws.com/ocr/organizations"
  OCRFunction:
    Description: OCR Lambda Function ARN
    Value: !GetAtt OCRFunctionPrd.Arn
  OCRFunctionIamRole:
    Description: Implicit IAM Role created for OCR function
    Value: !GetAtt LambdaExecutionRole.Arn
  OCRCustomDomain:
    Description: Custom domain URL for Cognito user pool
    Value: !Sub "https://${CustomDomain}.auth.${AWS::Region}.amazoncognito.com"
